<?xml version="1.0" encoding="UTF-8"?><testrun duration="19672" footerText="Generated by IntelliJ IDEA on 5/2/24, 2:31 PM" name="FinalTest">
    <count name="total" value="38"/>
    <count name="failed" value="1"/>
    <count name="passed" value="37"/>
    <config configId="JUnit" name="FinalTest">
        <output_file path="final_test.log" is_save="true"/>
        <module name="logistics"/>
        <extension name="coverage">
            <pattern>
                <option name="PATTERN" value="dev.xxj.logistics.Application"/>
                <option name="ENABLED" value="true"/>
                <option name="INCLUDE" value="false"/>
            </pattern>
            <pattern>
                <option name="PATTERN" value="dev.xxj.logistics.*"/>
                <option name="ENABLED" value="true"/>
            </pattern>
        </extension>
        <option name="PACKAGE_NAME" value="dev.xxj.logistics"/>
        <option name="MAIN_CLASS_NAME" value=""/>
        <option name="METHOD_NAME" value=""/>
        <option name="TEST_OBJECT" value="package"/>
        <method v="2">
            <option name="Make" enabled="true"/>
            <option name="ConnectionRunnerForConfigurationId">
                <option name="envFile" value="C:\Users\frank\IdeaProjects\logistics-manage-back\.azure\default\.env"/>
            </option>
        </method>
    </config>
    <root name="logistics" comment="dev.xxj" location="java:suite://dev.xxj.logistics">
        <output type="stdout">C:\Users\frank\.jdks\corretto-17.0.11\bin\java.exe -ea -javaagent:C:\Users\frank\AppData\Local\JetBrains\IntelliJIdea2024.1\testAgent\intellij-coverage-agent-1.0.744.jar=C:\Users\frank\AppData\Local\Temp\coverage4args -Didea.coverage.calculate.hits=true -Didea.test.cyclic.buffer.size=1048576 "-javaagent:C:\Users\frank\Program Files\JetBrains\IntelliJ IDEA 2023.3.4\lib\idea_rt.jar=61074:C:\Users\frank\Program Files\JetBrains\IntelliJ IDEA 2023.3.4\bin" -Dfile.encoding=UTF-8 -classpath "C:\Users\frank\.m2\repository\org\junit\platform\junit-platform-launcher\1.10.2\junit-platform-launcher-1.10.2.jar;C:\Users\frank\Program Files\JetBrains\IntelliJ IDEA 2023.3.4\lib\idea_rt.jar;C:\Users\frank\Program Files\JetBrains\IntelliJ IDEA 2023.3.4\plugins\junit\lib\junit5-rt.jar;C:\Users\frank\Program Files\JetBrains\IntelliJ IDEA 2023.3.4\plugins\junit\lib\junit-rt.jar;C:\Users\frank\IdeaProjects\logistics-manage-back\target\test-classes;C:\Users\frank\IdeaProjects\logistics-manage-back\target\classes;C:\Users\frank\.m2\repository\org\springframework\boot\spring-boot-starter-actuator\3.2.5\spring-boot-starter-actuator-3.2.5.jar;C:\Users\frank\.m2\repository\org\springframework\boot\spring-boot-starter\3.2.5\spring-boot-starter-3.2.5.jar;C:\Users\frank\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.2.5\spring-boot-starter-logging-3.2.5.jar;C:\Users\frank\.m2\repository\ch\qos\logback\logback-classic\1.4.14\logback-classic-1.4.14.jar;C:\Users\frank\.m2\repository\ch\qos\logback\logback-core\1.4.14\logback-core-1.4.14.jar;C:\Users\frank\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.21.1\log4j-to-slf4j-2.21.1.jar;C:\Users\frank\.m2\repository\org\apache\logging\log4j\log4j-api\2.21.1\log4j-api-2.21.1.jar;C:\Users\frank\.m2\repository\org\slf4j\jul-to-slf4j\2.0.13\jul-to-slf4j-2.0.13.jar;C:\Users\frank\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\frank\.m2\repository\org\yaml\snakeyaml\2.2\snakeyaml-2.2.jar;C:\Users\frank\.m2\repository\org\springframework\boot\spring-boot-actuator-autoconfigure\3.2.5\spring-boot-actuator-autoconfigure-3.2.5.jar;C:\Users\frank\.m2\repository\org\springframework\boot\spring-boot-actuator\3.2.5\spring-boot-actuator-3.2.5.jar;C:\Users\frank\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.15.4\jackson-databind-2.15.4.jar;C:\Users\frank\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.15.4\jackson-annotations-2.15.4.jar;C:\Users\frank\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.15.4\jackson-core-2.15.4.jar;C:\Users\frank\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.15.4\jackson-datatype-jsr310-2.15.4.jar;C:\Users\frank\.m2\repository\io\micrometer\micrometer-observation\1.12.5\micrometer-observation-1.12.5.jar;C:\Users\frank\.m2\repository\io\micrometer\micrometer-commons\1.12.5\micrometer-commons-1.12.5.jar;C:\Users\frank\.m2\repository\io\micrometer\micrometer-jakarta9\1.12.5\micrometer-jakarta9-1.12.5.jar;C:\Users\frank\.m2\repository\io\micrometer\micrometer-core\1.12.5\micrometer-core-1.12.5.jar;C:\Users\frank\.m2\repository\org\hdrhistogram\HdrHistogram\2.1.12\HdrHistogram-2.1.12.jar;C:\Users\frank\.m2\repository\org\latencyutils\LatencyUtils\2.0.3\LatencyUtils-2.0.3.jar;C:\Users\frank\.m2\repository\org\springframework\boot\spring-boot-starter-cache\3.2.5\spring-boot-starter-cache-3.2.5.jar;C:\Users\frank\.m2\repository\org\springframework\spring-context-support\6.1.6\spring-context-support-6.1.6.jar;C:\Users\frank\.m2\repository\org\springframework\spring-beans\6.1.6\spring-beans-6.1.6.jar;C:\Users\frank\.m2\repository\org\springframework\spring-context\6.1.6\spring-context-6.1.6.jar;C:\Users\frank\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\3.2.5\spring-boot-starter-data-jpa-3.2.5.jar;C:\Users\frank\.m2\repository\org\springframework\boot\spring-boot-starter-aop\3.2.5\spring-boot-starter-aop-3.2.5.jar;C:\Users\frank\.m2\repository\org\aspectj\aspectjweaver\1.9.22\aspectjweaver-1.9.22.jar;C:\Users\frank\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\3.2.5\spring-boot-starter-jdbc-3.2.5.jar;C:\Users\frank\.m2\repository\com\zaxxer\HikariCP\5.0.1\HikariCP-5.0.1.jar;C:\Users\frank\.m2\repository\org\springframework\spring-jdbc\6.1.6\spring-jdbc-6.1.6.jar;C:\Users\frank\.m2\repository\org\hibernate\orm\hibernate-core\6.4.4.Final\hibernate-core-6.4.4.Final.jar;C:\Users\frank\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\frank\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\frank\.m2\repository\org\jboss\logging\jboss-logging\3.5.3.Final\jboss-logging-3.5.3.Final.jar;C:\Users\frank\.m2\repository\org\hibernate\common\hibernate-commons-annotations\6.0.6.Final\hibernate-commons-annotations-6.0.6.Final.jar;C:\Users\frank\.m2\repository\io\smallrye\jandex\3.1.2\jandex-3.1.2.jar;C:\Users\frank\.m2\repository\com\fasterxml\classmate\1.6.0\classmate-1.6.0.jar;C:\Users\frank\.m2\repository\net\bytebuddy\byte-buddy\1.14.13\byte-buddy-1.14.13.jar;C:\Users\frank\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.5\jaxb-runtime-4.0.5.jar;C:\Users\frank\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.5\jaxb-core-4.0.5.jar;C:\Users\frank\.m2\repository\org\eclipse\angus\angus-activation\2.0.2\angus-activation-2.0.2.jar;C:\Users\frank\.m2\repository\org\glassfish\jaxb\txw2\4.0.5\txw2-4.0.5.jar;C:\Users\frank\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.2\istack-commons-runtime-4.1.2.jar;C:\Users\frank\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\frank\.m2\repository\org\antlr\antlr4-runtime\4.13.0\antlr4-runtime-4.13.0.jar;C:\Users\frank\.m2\repository\org\springframework\data\spring-data-jpa\3.2.5\spring-data-jpa-3.2.5.jar;C:\Users\frank\.m2\repository\org\springframework\data\spring-data-commons\3.2.5\spring-data-commons-3.2.5.jar;C:\Users\frank\.m2\repository\org\springframework\spring-orm\6.1.6\spring-orm-6.1.6.jar;C:\Users\frank\.m2\repository\org\springframework\spring-tx\6.1.6\spring-tx-6.1.6.jar;C:\Users\frank\.m2\repository\org\springframework\spring-aspects\6.1.6\spring-aspects-6.1.6.jar;C:\Users\frank\.m2\repository\org\springframework\boot\spring-boot-starter-validation\3.2.5\spring-boot-starter-validation-3.2.5.jar;C:\Users\frank\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\10.1.20\tomcat-embed-el-10.1.20.jar;C:\Users\frank\.m2\repository\org\hibernate\validator\hibernate-validator\8.0.1.Final\hibernate-validator-8.0.1.Final.jar;C:\Users\frank\.m2\repository\jakarta\validation\jakarta.validation-api\3.0.2\jakarta.validation-api-3.0.2.jar;C:\Users\frank\.m2\repository\org\springframework\boot\spring-boot-starter-web\3.2.5\spring-boot-starter-web-3.2.5.jar;C:\Users\frank\.m2\repository\org\springframework\boot\spring-boot-starter-json\3.2.5\spring-boot-starter-json-3.2.5.jar;C:\Users\frank\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.15.4\jackson-datatype-jdk8-2.15.4.jar;C:\Users\frank\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.15.4\jackson-module-parameter-names-2.15.4.jar;C:\Users\frank\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\3.2.5\spring-boot-starter-tomcat-3.2.5.jar;C:\Users\frank\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\10.1.20\tomcat-embed-core-10.1.20.jar;C:\Users\frank\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\10.1.20\tomcat-embed-websocket-10.1.20.jar;C:\Users\frank\.m2\repository\org\springframework\spring-web\6.1.6\spring-web-6.1.6.jar;C:\Users\frank\.m2\repository\org\springframework\spring-webmvc\6.1.6\spring-webmvc-6.1.6.jar;C:\Users\frank\.m2\repository\org\springframework\spring-expression\6.1.6\spring-expression-6.1.6.jar;C:\Users\frank\.m2\repository\org\springframework\session\spring-session-core\3.2.2\spring-session-core-3.2.2.jar;C:\Users\frank\.m2\repository\org\springframework\spring-jcl\6.1.6\spring-jcl-6.1.6.jar;C:\Users\frank\.m2\repository\org\springframework\boot\spring-boot-devtools\3.2.5\spring-boot-devtools-3.2.5.jar;C:\Users\frank\.m2\repository\org\springframework\boot\spring-boot\3.2.5\spring-boot-3.2.5.jar;C:\Users\frank\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.2.5\spring-boot-autoconfigure-3.2.5.jar;C:\Users\frank\.m2\repository\org\projectlombok\lombok\1.18.32\lombok-1.18.32.jar;C:\Users\frank\.m2\repository\org\springframework\boot\spring-boot-starter-test\3.2.5\spring-boot-starter-test-3.2.5.jar;C:\Users\frank\.m2\repository\org\springframework\boot\spring-boot-test\3.2.5\spring-boot-test-3.2.5.jar;C:\Users\frank\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\3.2.5\spring-boot-test-autoconfigure-3.2.5.jar;C:\Users\frank\.m2\repository\com\jayway\jsonpath\json-path\2.9.0\json-path-2.9.0.jar;C:\Users\frank\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.2\jakarta.xml.bind-api-4.0.2.jar;C:\Users\frank\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.3\jakarta.activation-api-2.1.3.jar;C:\Users\frank\.m2\repository\net\minidev\json-smart\2.5.1\json-smart-2.5.1.jar;C:\Users\frank\.m2\repository\net\minidev\accessors-smart\2.5.1\accessors-smart-2.5.1.jar;C:\Users\frank\.m2\repository\org\ow2\asm\asm\9.6\asm-9.6.jar;C:\Users\frank\.m2\repository\org\assertj\assertj-core\3.24.2\assertj-core-3.24.2.jar;C:\Users\frank\.m2\repository\org\awaitility\awaitility\4.2.1\awaitility-4.2.1.jar;C:\Users\frank\.m2\repository\org\hamcrest\hamcrest\2.2\hamcrest-2.2.jar;C:\Users\frank\.m2\repository\org\junit\jupiter\junit-jupiter\5.10.2\junit-jupiter-5.10.2.jar;C:\Users\frank\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.10.2\junit-jupiter-api-5.10.2.jar;C:\Users\frank\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\frank\.m2\repository\org\junit\platform\junit-platform-commons\1.10.2\junit-platform-commons-1.10.2.jar;C:\Users\frank\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\frank\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.10.2\junit-jupiter-params-5.10.2.jar;C:\Users\frank\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.10.2\junit-jupiter-engine-5.10.2.jar;C:\Users\frank\.m2\repository\org\junit\platform\junit-platform-engine\1.10.2\junit-platform-engine-1.10.2.jar;C:\Users\frank\.m2\repository\org\mockito\mockito-core\5.7.0\mockito-core-5.7.0.jar;C:\Users\frank\.m2\repository\net\bytebuddy\byte-buddy-agent\1.14.13\byte-buddy-agent-1.14.13.jar;C:\Users\frank\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\frank\.m2\repository\org\mockito\mockito-junit-jupiter\5.7.0\mockito-junit-jupiter-5.7.0.jar;C:\Users\frank\.m2\repository\org\skyscreamer\jsonassert\1.5.1\jsonassert-1.5.1.jar;C:\Users\frank\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\frank\.m2\repository\org\springframework\spring-core\6.1.6\spring-core-6.1.6.jar;C:\Users\frank\.m2\repository\org\springframework\spring-test\6.1.6\spring-test-6.1.6.jar;C:\Users\frank\.m2\repository\org\xmlunit\xmlunit-core\2.9.1\xmlunit-core-2.9.1.jar;C:\Users\frank\.m2\repository\com\mysql\mysql-connector-j\8.3.0\mysql-connector-j-8.3.0.jar;C:\Users\frank\.m2\repository\org\springframework\boot\spring-boot-starter-security\3.2.5\spring-boot-starter-security-3.2.5.jar;C:\Users\frank\.m2\repository\org\springframework\spring-aop\6.1.6\spring-aop-6.1.6.jar;C:\Users\frank\.m2\repository\org\springframework\security\spring-security-config\6.2.4\spring-security-config-6.2.4.jar;C:\Users\frank\.m2\repository\org\springframework\security\spring-security-web\6.2.4\spring-security-web-6.2.4.jar;C:\Users\frank\.m2\repository\org\springframework\security\spring-security-test\6.2.4\spring-security-test-6.2.4.jar;C:\Users\frank\.m2\repository\org\springframework\security\spring-security-core\6.2.4\spring-security-core-6.2.4.jar;C:\Users\frank\.m2\repository\org\springframework\security\spring-security-crypto\6.2.4\spring-security-crypto-6.2.4.jar;C:\Users\frank\.m2\repository\org\springframework\boot\spring-boot-starter-thymeleaf\3.2.5\spring-boot-starter-thymeleaf-3.2.5.jar;C:\Users\frank\.m2\repository\org\thymeleaf\thymeleaf-spring6\3.1.2.RELEASE\thymeleaf-spring6-3.1.2.RELEASE.jar;C:\Users\frank\.m2\repository\org\thymeleaf\thymeleaf\3.1.2.RELEASE\thymeleaf-3.1.2.RELEASE.jar;C:\Users\frank\.m2\repository\org\attoparser\attoparser\2.0.7.RELEASE\attoparser-2.0.7.RELEASE.jar;C:\Users\frank\.m2\repository\org\unbescape\unbescape\1.1.6.RELEASE\unbescape-1.1.6.RELEASE.jar;C:\Users\frank\.m2\repository\org\thymeleaf\extras\thymeleaf-extras-springsecurity6\3.1.2.RELEASE\thymeleaf-extras-springsecurity6-3.1.2.RELEASE.jar;C:\Users\frank\.m2\repository\org\slf4j\slf4j-api\2.0.13\slf4j-api-2.0.13.jar;C:\Users\frank\.m2\repository\com\h2database\h2\2.2.224\h2-2.2.224.jar" com.intellij.rt.junit.JUnitStarter -ideVersion5 -junit5 @w@C:\Users\frank\AppData\Local\Temp\idea_working_dirs_junit.tmp @C:\Users\frank\AppData\Local\Temp\idea_junit.tmp -socket61073
Console output is saving to: C:\Users\frank\Program Files\JetBrains\IntelliJ IDEA 2023.3.4\jbr\bin\$MODULE_WORKING_DIR$\final_test.log
</output>
        <output type="stdout">2024-05-02T14:30:57.315+08:00  INFO 30236 --- [logistics-manage-back] [ionShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2024-05-02T14:30:57.316+08:00  INFO 30236 --- [logistics-manage-back] [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2024-05-02T14:30:57.319+08:00  INFO 30236 --- [logistics-manage-back] [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2024-05-02T14:30:57.321+08:00  INFO 30236 --- [logistics-manage-back] [ionShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
Hibernate: drop table if exists good cascade 
Hibernate: drop table if exists good_storage cascade 
Hibernate: drop table if exists warehouse cascade 
2024-05-02T14:30:57.325+08:00  INFO 30236 --- [logistics-manage-back] [ionShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2024-05-02T14:30:57.325+08:00  INFO 30236 --- [logistics-manage-back] [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Shutdown initiated...
2024-05-02T14:30:58.234+08:00  INFO 30236 --- [logistics-manage-back] [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Shutdown completed.
</output>
        <output type="stdout">Process finished with exit code -1
</output>
    </root>
    <suite duration="13687" locationUrl="java:suite://dev.xxj.logistics.controller.GoodControllerTest" name="GoodControllerTest" status="passed">
        <test duration="274" locationUrl="java:test://dev.xxj.logistics.controller.GoodControllerTest/t01contextLoads" name="t01contextLoads()" metainfo="" status="passed">
            <output type="stderr">OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
</output>
        </test>
        <test duration="888" locationUrl="java:test://dev.xxj.logistics.controller.GoodControllerTest/t02getAllGoods" name="t02getAllGoods()" metainfo="" status="passed">
            <output type="stdout">Hibernate: select g1_0.id,g1_0.name from good g1_0
2024-05-02T14:30:35.575+08:00  INFO 30236 --- [logistics-manage-back] [           main] d.x.l.controller.GoodControllerTest      : [{"id":"42a3c4a8-c85b-4bb7-bb64-0d66ede98124","name":"banana"},{"id":"5019c7f9-db09-435c-b606-5f078b48a62c","name":"pear"},{"id":"922bdc1c-8053-4d9d-bf0a-697ff6dd9b73","name":"apple"},{"id":"a040758f-0e47-42fb-ad8f-a5b213fb149a","name":"mouse Logitech K2750000"},{"id":"ab1565f8-4875-4c7a-b83a-fdc4064072b7","name":"tennis racket"},{"id":"b8c82952-2684-4e34-9352-977371d14572","name":"watermelon"},{"id":"e4ed55b9-3c1a-4b9a-8ab6-d9fa78725fe9","name":"tennis ball"}]
</output>
        </test>
        <test duration="487" locationUrl="java:test://dev.xxj.logistics.controller.GoodControllerTest/t03addGood" name="t03addGood()" metainfo="" status="passed">
            <output type="stdout">Hibernate: insert into good (name,id) values (?,?)
</output>
        </test>
        <test duration="1093" locationUrl="java:test://dev.xxj.logistics.controller.GoodControllerTest/t04updateGood" name="t04updateGood()" metainfo="" status="passed">
            <output type="stdout">Hibernate: select g1_0.id,g1_0.name from good g1_0 where g1_0.id=?
Hibernate: update good set name=? where id=?
</output>
        </test>
        <test duration="648" locationUrl="java:test://dev.xxj.logistics.controller.GoodControllerTest/t05getGoodById" name="t05getGoodById()" metainfo="" status="passed">
            <output type="stdout">Hibernate: select g1_0.id,g1_0.name from good g1_0 where g1_0.id=?
MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /good/c278c0a5-cf46-4558-be64-32264c4d9436
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {SPRING_SECURITY_CONTEXT=SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=user, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_USER]]]}
Handler:
             Type = dev.xxj.logistics.controller.GoodController
           Method = dev.xxj.logistics.controller.GoodController#getGoodById(UUID)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = {"id":"c278c0a5-cf46-4558-be64-32264c4d9436","name":"mouse Logitech K2750000"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="6" locationUrl="java:test://dev.xxj.logistics.controller.GoodControllerTest/t06getGoodByName1" name="t06getGoodByName1()" metainfo="" status="passed"/>
        <test duration="131" locationUrl="java:test://dev.xxj.logistics.controller.GoodControllerTest/t06getGoodByName2" name="t06getGoodByName2()" metainfo="" status="passed">
            <output type="stdout">Hibernate: select g1_0.id,g1_0.name from good g1_0 where g1_0.name=?
</output>
        </test>
        <test duration="877" locationUrl="java:test://dev.xxj.logistics.controller.GoodControllerTest/t07storeGood1Bad" name="t07storeGood1Bad()" metainfo="" status="passed">
            <output type="stdout">Hibernate: select w1_0.id,w1_0.location,w1_0.max_amount,w1_0.name from warehouse w1_0 where w1_0.id=?
Hibernate: select gs1_0.id,gs1_0.amount,gs1_0.good_id,gs1_0.warehouse_id from good_storage gs1_0 join warehouse w1_0 on w1_0.id=gs1_0.warehouse_id where w1_0.id=?
Hibernate: select gs1_0.id,gs1_0.amount,gs1_0.good_id,gs1_0.warehouse_id from good_storage gs1_0 join warehouse w1_0 on w1_0.id=gs1_0.warehouse_id join good g1_0 on g1_0.id=gs1_0.good_id where w1_0.id=? and g1_0.id=?
2024-05-02T14:30:38.825+08:00  INFO 30236 --- [logistics-manage-back] [           main] d.x.l.service.impl.GoodServiceImpl       : Warehouse is already full
</output>
        </test>
        <test duration="1203" locationUrl="java:test://dev.xxj.logistics.controller.GoodControllerTest/t07storeGood2Ok" name="t07storeGood2Ok()" metainfo="" status="passed">
            <output type="stdout">Hibernate: select gs1_0.id,gs1_0.amount,gs1_0.good_id,gs1_0.warehouse_id from good_storage gs1_0 join warehouse w1_0 on w1_0.id=gs1_0.warehouse_id where w1_0.id=?
Hibernate: select gs1_0.id,gs1_0.amount,gs1_0.good_id,gs1_0.warehouse_id from good_storage gs1_0 join warehouse w1_0 on w1_0.id=gs1_0.warehouse_id join good g1_0 on g1_0.id=gs1_0.good_id where w1_0.id=? and g1_0.id=?
Hibernate: insert into good_storage (amount,good_id,warehouse_id,id) values (?,?,?,?)
MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /good/store
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"114"]
             Body = {"warehouseId":"feb0836c-376a-4700-8f12-5af5bb80562c","goodId":"c278c0a5-cf46-4558-be64-32264c4d9436","amount":91}
    Session Attrs = {SPRING_SECURITY_CONTEXT=SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN, ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_ADMIN, ROLE_USER]]]}
Handler:
             Type = dev.xxj.logistics.controller.GoodController
           Method = dev.xxj.logistics.controller.GoodController#storeGood(GoodStorageDto)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", Content-Type:"text/plain;charset=UTF-8", Content-Length:"172", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = text/plain;charset=UTF-8
             Body = Success stored to GoodStorage{id=f075fccf-bb0f-46f7-864d-7f54b45a8994, warehouse=feb0836c-376a-4700-8f12-5af5bb80562c, good=c278c0a5-cf46-4558-be64-32264c4d9436, amount=91}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="874" locationUrl="java:test://dev.xxj.logistics.controller.GoodControllerTest/t07storeGood3Ok" name="t07storeGood3Ok()" metainfo="" status="passed">
            <output type="stdout">Hibernate: select gs1_0.id,gs1_0.amount,gs1_0.good_id,gs1_0.warehouse_id from good_storage gs1_0 join warehouse w1_0 on w1_0.id=gs1_0.warehouse_id where w1_0.id=?
Hibernate: select g1_0.id,g1_0.name from good g1_0 where g1_0.id=?
Hibernate: select w1_0.id,w1_0.location,w1_0.max_amount,w1_0.name from warehouse w1_0 where w1_0.id=?
Hibernate: select gs1_0.id,gs1_0.amount,gs1_0.good_id,gs1_0.warehouse_id from good_storage gs1_0 join warehouse w1_0 on w1_0.id=gs1_0.warehouse_id join good g1_0 on g1_0.id=gs1_0.good_id where w1_0.id=? and g1_0.id=?
Hibernate: update good_storage set amount=?,good_id=?,warehouse_id=? where id=?
MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /good/store
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"113"]
             Body = {"warehouseId":"feb0836c-376a-4700-8f12-5af5bb80562c","goodId":"c278c0a5-cf46-4558-be64-32264c4d9436","amount":3}
    Session Attrs = {SPRING_SECURITY_CONTEXT=SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN, ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_ADMIN, ROLE_USER]]]}
Handler:
             Type = dev.xxj.logistics.controller.GoodController
           Method = dev.xxj.logistics.controller.GoodController#storeGood(GoodStorageDto)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", Content-Type:"text/plain;charset=UTF-8", Content-Length:"172", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = text/plain;charset=UTF-8
             Body = Success stored to GoodStorage{id=f075fccf-bb0f-46f7-864d-7f54b45a8994, warehouse=feb0836c-376a-4700-8f12-5af5bb80562c, good=c278c0a5-cf46-4558-be64-32264c4d9436, amount=94}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="443" locationUrl="java:test://dev.xxj.logistics.controller.GoodControllerTest/t07storeGood4Bad" name="t07storeGood4Bad()" metainfo="" status="passed">
            <output type="stdout">Hibernate: select gs1_0.id,gs1_0.amount,gs1_0.good_id,gs1_0.warehouse_id from good_storage gs1_0 join warehouse w1_0 on w1_0.id=gs1_0.warehouse_id where w1_0.id=?
Hibernate: select g1_0.id,g1_0.name from good g1_0 where g1_0.id=?
Hibernate: select w1_0.id,w1_0.location,w1_0.max_amount,w1_0.name from warehouse w1_0 where w1_0.id=?
Hibernate: select gs1_0.id,gs1_0.amount,gs1_0.good_id,gs1_0.warehouse_id from good_storage gs1_0 join warehouse w1_0 on w1_0.id=gs1_0.warehouse_id join good g1_0 on g1_0.id=gs1_0.good_id where w1_0.id=? and g1_0.id=?
2024-05-02T14:30:41.350+08:00  INFO 30236 --- [logistics-manage-back] [           main] d.x.l.service.impl.GoodServiceImpl       : Warehouse is not full enough to store more goods of this type
MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /good/store
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"116"]
             Body = {"warehouseId":"feb0836c-376a-4700-8f12-5af5bb80562c","goodId":"c278c0a5-cf46-4558-be64-32264c4d9436","amount":1000}
    Session Attrs = {SPRING_SECURITY_CONTEXT=SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN, ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_ADMIN, ROLE_USER]]]}
Handler:
             Type = dev.xxj.logistics.controller.GoodController
           Method = dev.xxj.logistics.controller.GoodController#storeGood(GoodStorageDto)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", Content-Type:"text/plain;charset=UTF-8", Content-Length:"17", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = text/plain;charset=UTF-8
             Body = Warehouse is full
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="334" locationUrl="java:test://dev.xxj.logistics.controller.GoodControllerTest/t08retrieveGood1NotSuccess" name="t08retrieveGood1NotSuccess()" metainfo="" status="passed">
            <output type="stdout">Hibernate: select gs1_0.id,gs1_0.amount,gs1_0.good_id,gs1_0.warehouse_id from good_storage gs1_0 join warehouse w1_0 on w1_0.id=gs1_0.warehouse_id join good g1_0 on g1_0.id=gs1_0.good_id where w1_0.id=? and g1_0.id=?
Hibernate: select g1_0.id,g1_0.name from good g1_0 where g1_0.id=?
Hibernate: select w1_0.id,w1_0.location,w1_0.max_amount,w1_0.name from warehouse w1_0 where w1_0.id=?
2024-05-02T14:30:41.684+08:00  INFO 30236 --- [logistics-manage-back] [           main] d.x.l.service.impl.GoodServiceImpl       : Not enough goods in the warehouse
</output>
        </test>
        <test duration="768" locationUrl="java:test://dev.xxj.logistics.controller.GoodControllerTest/t08retrieveGood2Success" name="t08retrieveGood2Success()" metainfo="" status="passed">
            <output type="stdout">Hibernate: select gs1_0.id,gs1_0.amount,gs1_0.good_id,gs1_0.warehouse_id from good_storage gs1_0 join warehouse w1_0 on w1_0.id=gs1_0.warehouse_id join good g1_0 on g1_0.id=gs1_0.good_id where w1_0.id=? and g1_0.id=?
Hibernate: select g1_0.id,g1_0.name from good g1_0 where g1_0.id=?
Hibernate: select w1_0.id,w1_0.location,w1_0.max_amount,w1_0.name from warehouse w1_0 where w1_0.id=?
Hibernate: update good_storage set amount=?,good_id=?,warehouse_id=? where id=?
2024-05-02T14:30:42.451+08:00  INFO 30236 --- [logistics-manage-back] [           main] d.x.l.service.impl.GoodServiceImpl       : Goods c278c0a5-cf46-4558-be64-32264c4d9436 retrieved successfully
MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /good/retrieve
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"114"]
             Body = {"warehouseId":"feb0836c-376a-4700-8f12-5af5bb80562c","goodId":"c278c0a5-cf46-4558-be64-32264c4d9436","amount":40}
    Session Attrs = {SPRING_SECURITY_CONTEXT=SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN, ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_ADMIN, ROLE_USER]]]}
Handler:
             Type = dev.xxj.logistics.controller.GoodController
           Method = dev.xxj.logistics.controller.GoodController#retrieveGood(GoodStorageDto)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", Content-Type:"text/plain;charset=UTF-8", Content-Length:"7", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = text/plain;charset=UTF-8
             Body = Success
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="2592" locationUrl="java:test://dev.xxj.logistics.controller.GoodControllerTest/t10moveGood1" name="t10moveGood1()" metainfo="" status="passed">
            <output type="stdout">Hibernate: select gs1_0.id,gs1_0.amount,gs1_0.good_id,gs1_0.warehouse_id from good_storage gs1_0 join warehouse w1_0 on w1_0.id=gs1_0.warehouse_id join good g1_0 on g1_0.id=gs1_0.good_id where w1_0.id=? and g1_0.id=?
Hibernate: select g1_0.id,g1_0.name from good g1_0 where g1_0.id=?
Hibernate: select w1_0.id,w1_0.location,w1_0.max_amount,w1_0.name from warehouse w1_0 where w1_0.id=?
Hibernate: update good_storage set amount=?,good_id=?,warehouse_id=? where id=?
2024-05-02T14:30:43.220+08:00  INFO 30236 --- [logistics-manage-back] [           main] d.x.l.service.impl.GoodServiceImpl       : Goods c278c0a5-cf46-4558-be64-32264c4d9436 retrieved successfully
Hibernate: select w1_0.id,w1_0.location,w1_0.max_amount,w1_0.name from warehouse w1_0 where w1_0.id=?
Hibernate: select gs1_0.id,gs1_0.amount,gs1_0.good_id,gs1_0.warehouse_id from good_storage gs1_0 join warehouse w1_0 on w1_0.id=gs1_0.warehouse_id where w1_0.id=?
Hibernate: select gs1_0.id,gs1_0.amount,gs1_0.good_id,gs1_0.warehouse_id from good_storage gs1_0 join warehouse w1_0 on w1_0.id=gs1_0.warehouse_id join good g1_0 on g1_0.id=gs1_0.good_id where w1_0.id=? and g1_0.id=?
Hibernate: insert into good_storage (amount,good_id,warehouse_id,id) values (?,?,?,?)
MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /good/move
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"154"]
             Body = {"fromId":"feb0836c-376a-4700-8f12-5af5bb80562c","toId":"d8be154a-da4f-4699-bf14-4456119de4a8","goodId":"c278c0a5-cf46-4558-be64-32264c4d9436","amount":5}
    Session Attrs = {SPRING_SECURITY_CONTEXT=SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN, ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_ADMIN, ROLE_USER]]]}
Handler:
             Type = dev.xxj.logistics.controller.GoodController
           Method = dev.xxj.logistics.controller.GoodController#moveGood(MoveDTO)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", Content-Type:"text/plain;charset=UTF-8", Content-Length:"7", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = text/plain;charset=UTF-8
             Body = Success
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="326" locationUrl="java:test://dev.xxj.logistics.controller.GoodControllerTest/t10moveGood2" name="t10moveGood2()" metainfo="" status="passed">
            <output type="stdout">Hibernate: select gs1_0.id,gs1_0.amount,gs1_0.good_id,gs1_0.warehouse_id from good_storage gs1_0 join warehouse w1_0 on w1_0.id=gs1_0.warehouse_id join good g1_0 on g1_0.id=gs1_0.good_id where w1_0.id=? and g1_0.id=?
Hibernate: select g1_0.id,g1_0.name from good g1_0 where g1_0.id=?
Hibernate: select w1_0.id,w1_0.location,w1_0.max_amount,w1_0.name from warehouse w1_0 where w1_0.id=?
2024-05-02T14:30:45.376+08:00  INFO 30236 --- [logistics-manage-back] [           main] d.x.l.service.impl.GoodServiceImpl       : Not enough goods in the warehouse
</output>
        </test>
        <test duration="442" locationUrl="java:test://dev.xxj.logistics.controller.GoodControllerTest/t11getGoodStorages" name="t11getGoodStorages()" metainfo="" status="passed">
            <output type="stdout">Hibernate: select gs1_0.id,gs1_0.amount,gs1_0.good_id,gs1_0.warehouse_id from good_storage gs1_0 join good g1_0 on g1_0.id=gs1_0.good_id where g1_0.id=?
Hibernate: select g1_0.id,g1_0.name from good g1_0 where g1_0.id=?
Hibernate: select w1_0.id,w1_0.location,w1_0.max_amount,w1_0.name from warehouse w1_0 where w1_0.id=?
Hibernate: select w1_0.id,w1_0.location,w1_0.max_amount,w1_0.name from warehouse w1_0 where w1_0.id=?
MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /good/storages/c278c0a5-cf46-4558-be64-32264c4d9436
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {SPRING_SECURITY_CONTEXT=SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=user, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_USER]]]}
Handler:
             Type = dev.xxj.logistics.controller.GoodController
           Method = dev.xxj.logistics.controller.GoodController#getGoodStorages(UUID)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = [{"id":"89e868a8-0bc8-4fcc-9826-49863a2d8171","warehouse":{"id":"d8be154a-da4f-4699-bf14-4456119de4a8","name":"warehouse-2","location":"France","maxAmount":500},"good":{"id":"c278c0a5-cf46-4558-be64-32264c4d9436","name":"mouse Logitech K2750000"},"amount":5},{"id":"f075fccf-bb0f-46f7-864d-7f54b45a8994","warehouse":{"id":"feb0836c-376a-4700-8f12-5af5bb80562c","name":"warehouse-1","location":"Beijing","maxAmount":200},"good":{"id":"c278c0a5-cf46-4558-be64-32264c4d9436","name":"mouse Logitech K2750000"},"amount":49}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="441" locationUrl="java:test://dev.xxj.logistics.controller.GoodControllerTest/t12getLocations" name="t12getLocations()" metainfo="" status="passed">
            <output type="stdout">Hibernate: select gs1_0.id,gs1_0.amount,gs1_0.good_id,gs1_0.warehouse_id from good_storage gs1_0 join good g1_0 on g1_0.id=gs1_0.good_id where g1_0.id=?
Hibernate: select g1_0.id,g1_0.name from good g1_0 where g1_0.id=?
Hibernate: select w1_0.id,w1_0.location,w1_0.max_amount,w1_0.name from warehouse w1_0 where w1_0.id=?
Hibernate: select w1_0.id,w1_0.location,w1_0.max_amount,w1_0.name from warehouse w1_0 where w1_0.id=?
MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /good/locations/c278c0a5-cf46-4558-be64-32264c4d9436
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {SPRING_SECURITY_CONTEXT=SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=user, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_USER]]]}
Handler:
             Type = dev.xxj.logistics.controller.GoodController
           Method = dev.xxj.logistics.controller.GoodController#getLocations(UUID)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = [{"id":"d8be154a-da4f-4699-bf14-4456119de4a8","name":"warehouse-2","location":"France","maxAmount":500},{"id":"feb0836c-376a-4700-8f12-5af5bb80562c","name":"warehouse-1","location":"Beijing","maxAmount":200}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="443" locationUrl="java:test://dev.xxj.logistics.controller.GoodControllerTest/t13getTotalAmount" name="t13getTotalAmount()" metainfo="" status="passed">
            <output type="stdout">Hibernate: select gs1_0.id,gs1_0.amount,gs1_0.good_id,gs1_0.warehouse_id from good_storage gs1_0 join good g1_0 on g1_0.id=gs1_0.good_id where g1_0.id=?
Hibernate: select g1_0.id,g1_0.name from good g1_0 where g1_0.id=?
Hibernate: select w1_0.id,w1_0.location,w1_0.max_amount,w1_0.name from warehouse w1_0 where w1_0.id=?
Hibernate: select w1_0.id,w1_0.location,w1_0.max_amount,w1_0.name from warehouse w1_0 where w1_0.id=?
MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /good/amount/c278c0a5-cf46-4558-be64-32264c4d9436
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {SPRING_SECURITY_CONTEXT=SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=user, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_USER]]]}
Handler:
             Type = dev.xxj.logistics.controller.GoodController
           Method = dev.xxj.logistics.controller.GoodController#getTotalAmount(UUID)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = 54
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="1417" locationUrl="java:test://dev.xxj.logistics.controller.GoodControllerTest/t17deleteGood" name="t17deleteGood()" metainfo="" status="passed">
            <output type="stdout">Hibernate: select gs1_0.id,gs1_0.amount,gs1_0.good_id,gs1_0.warehouse_id from good_storage gs1_0 join good g1_0 on g1_0.id=gs1_0.good_id where g1_0.id=?
Hibernate: select g1_0.id,g1_0.name from good g1_0 where g1_0.id=?
Hibernate: select w1_0.id,w1_0.location,w1_0.max_amount,w1_0.name from warehouse w1_0 where w1_0.id=?
Hibernate: select w1_0.id,w1_0.location,w1_0.max_amount,w1_0.name from warehouse w1_0 where w1_0.id=?
Hibernate: delete from good_storage where id=?
Hibernate: delete from good_storage where id=?
Hibernate: delete from good where id=?
</output>
        </test>
    </suite>
    <suite duration="14" locationUrl="java:suite://dev.xxj.logistics.repo.WarehouseRepositoryTest" name="WarehouseRepositoryTest" status="passed">
        <test duration="14" locationUrl="java:test://dev.xxj.logistics.repo.WarehouseRepositoryTest/t1testSave" name="t1testSave()" metainfo="" status="passed"/>
    </suite>
    <suite duration="1626" locationUrl="java:suite://dev.xxj.logistics.service.WarehouseServiceTest" name="WarehouseServiceTest" status="passed">
        <test duration="1" locationUrl="java:test://dev.xxj.logistics.service.WarehouseServiceTest/t1contextLoads" name="t1contextLoads()" metainfo="" status="passed"/>
        <test duration="1625" locationUrl="java:test://dev.xxj.logistics.service.WarehouseServiceTest/t2updateWarehouse" name="t2updateWarehouse()" metainfo="" status="passed">
            <output type="stdout">Hibernate: insert into warehouse (location,max_amount,name,id) values (?,?,?,?)
added = Warehouse{id=b85814fb-b3b2-42c7-9335-60d477f24620, name='w-n', location='Beijing', maxAmount=300}
Hibernate: select w1_0.id,w1_0.location,w1_0.max_amount,w1_0.name from warehouse w1_0 where w1_0.id=?
Hibernate: select w1_0.id,w1_0.location,w1_0.max_amount,w1_0.name from warehouse w1_0 where w1_0.id=?
Hibernate: update warehouse set location=?,max_amount=?,name=? where id=?
updated = Warehouse{id=b85814fb-b3b2-42c7-9335-60d477f24620, name='w-n', location='Beijing', maxAmount=500}
</output>
        </test>
    </suite>
    <suite duration="4344" locationUrl="java:suite://dev.xxj.logistics.controller.WarehouseControllerTest" name="WarehouseControllerTest" status="failed">
        <test duration="1" locationUrl="java:test://dev.xxj.logistics.controller.WarehouseControllerTest/t01contextLoads" name="t01contextLoads()" metainfo="" status="passed"/>
        <test duration="3" locationUrl="java:test://dev.xxj.logistics.controller.WarehouseControllerTest/t02addWarehouse1" name="t02addWarehouse1()" metainfo="" status="passed">
            <output type="stdout">MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /warehouse
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {SPRING_SECURITY_CONTEXT=SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=user, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_USER]]]}
Handler:
             Type = null
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 403
    Error message = Forbidden
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="541" locationUrl="java:test://dev.xxj.logistics.controller.WarehouseControllerTest/t03addWarehouse2" name="t03addWarehouse2()" metainfo="" status="passed">
            <output type="stdout">Hibernate: insert into warehouse (location,max_amount,name,id) values (?,?,?,?)
MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /warehouse
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"70"]
             Body = {"id":null,"name":"warehouse-643","location":"Brazil","maxAmount":265}
    Session Attrs = {SPRING_SECURITY_CONTEXT=SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN, ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_ADMIN, ROLE_USER]]]}
Handler:
             Type = dev.xxj.logistics.controller.WarehouseController
           Method = dev.xxj.logistics.controller.WarehouseController#addWarehouse(Warehouse)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = {"id":"efb7dac4-d1fa-42e4-a336-20827ddca769","name":"warehouse-643","location":"Brazil","maxAmount":265}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="434" locationUrl="java:test://dev.xxj.logistics.controller.WarehouseControllerTest/t04addWarehouse3" name="t04addWarehouse3()" metainfo="" status="passed">
            <output type="stdout">Hibernate: insert into warehouse (location,max_amount,name,id) values (?,?,?,?)
MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /warehouse
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"70"]
             Body = {"id":null,"name":"warehouse-838","location":"Russia","maxAmount":240}
    Session Attrs = {SPRING_SECURITY_CONTEXT=SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN, ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_ADMIN, ROLE_USER]]]}
Handler:
             Type = dev.xxj.logistics.controller.WarehouseController
           Method = dev.xxj.logistics.controller.WarehouseController#addWarehouse(Warehouse)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = {"id":"3374b466-0094-42e2-966e-94c5ba876d2f","name":"warehouse-838","location":"Russia","maxAmount":240}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="654" locationUrl="java:test://dev.xxj.logistics.controller.WarehouseControllerTest/t05getAllWarehouses1" name="t05getAllWarehouses1()" metainfo="" status="passed">
            <output type="stdout">Hibernate: select w1_0.id,w1_0.location,w1_0.max_amount,w1_0.name from warehouse w1_0
MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /warehouse
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {SPRING_SECURITY_CONTEXT=SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=user, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_USER]]]}
Handler:
             Type = dev.xxj.logistics.controller.WarehouseController
           Method = dev.xxj.logistics.controller.WarehouseController#getAllWarehouses()
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = [{"id":"0288a74b-a45f-4545-a84f-071cab1d7f02","name":"w-n","location":"Beijing","maxAmount":500},{"id":"07b7bcc9-d064-4ffb-8d39-f42ef5351111","name":"warehouse-791","location":"China","maxAmount":431},{"id":"15f97304-1ecc-4eb9-88e1-c2a66dc40719","name":"warehouse-581","location":"Brazil","maxAmount":600},{"id":"18c32ca5-5631-43f9-aee2-8d43f8bef1c5","name":"warehouse-645","location":"Brazil","maxAmount":122},{"id":"1dc13c41-6f86-42be-88f1-fa07197b28f4","name":"warehouse-190","location":"Russia","maxAmount":200},{"id":"205f18b0-d296-4451-b2fb-81a3af42be0f","name":"warehouse-145","location":"Russia","maxAmount":290},{"id":"28100b07-092a-4a72-9ab9-fe5448f74f5a","name":"warehouse-677","location":"China","maxAmount":282},{"id":"2c5e006a-4a57-4c40-8829-85373d54d3d3","name":"warehouse-868","location":"France","maxAmount":305},{"id":"2e69888d-ecc8-4096-8173-c44d7c4e7514","name":"warehouse-548","location":"China","maxAmount":105},{"id":"2f6faa0a-cec5-4c0f-bc75-b0690dbdfd4b","name":"warehouse-893","location":"Brazil","maxAmount":105},{"id":"3374b466-0094-42e2-966e-94c5ba876d2f","name":"warehouse-838","location":"Russia","maxAmount":240},{"id":"3b2173eb-6cb2-46b7-9b02-61c9c9fb7c88","name":"warehouse-766","location":"France","maxAmount":144},{"id":"3d02881e-d36f-492e-be49-c77876c703ce","name":"warehouse-386","location":"France","maxAmount":470},{"id":"3ef8acbd-9275-40be-adee-d30331f3b08b","name":"warehouse-416","location":"USA","maxAmount":105},{"id":"4afba9a3-f291-44ec-9884-1554a7004212","name":"warehouse-539","location":"USA","maxAmount":168},{"id":"4b87de86-8311-472b-85be-76d0515b15b0","name":"warehouse-579","location":"China","maxAmount":287},{"id":"4dde5a0c-07b1-4fbb-9271-e7d86cec7b59","name":"warehouse-204","location":"China","maxAmount":168},{"id":"50631618-90bb-4c2a-bf5d-a81ac451678d","name":"warehouse-516","location":"Russia","maxAmount":209},{"id":"53eaf9f8-78bc-46a2-9ef4-68fc92a59e9b","name":"warehouse-941","location":"France","maxAmount":343},{"id":"5511eac1-ba26-4c14-bd04-66e789a3b023","name":"warehouse-802","location":"China","maxAmount":495},{"id":"5dc44727-5f82-4a22-b134-49c1274dfd37","name":"warehouse-333","location":"France","maxAmount":275},{"id":"5f06e8ce-0aa9-47ca-8311-ded0f0d294cc","name":"warehouse-978","location":"USA","maxAmount":394},{"id":"62742eea-8669-48c9-88a7-b905c2f110c5","name":"warehouse-879","location":"Russia","maxAmount":331},{"id":"644ac7ab-369e-4a1c-84b8-a635050f83be","name":"warehouse-897","location":"Russia","maxAmount":168},{"id":"68d8b10e-635a-4c6e-813b-be585b6ff10d","name":"warehouse-253","location":"Brazil","maxAmount":247},{"id":"696d6d94-926f-418c-884f-95505707e821","name":"warehouse-151","location":"Russia","maxAmount":200},{"id":"6cd6610e-97b4-43bd-8b37-27f7b92482ab","name":"warehouse-681","location":"Russia","maxAmount":186},{"id":"71e08388-c18f-4ef9-901a-49bbaadda2ea","name":"warehouse-321","location":"France","maxAmount":377},{"id":"74488e45-6bdb-434a-9a64-5e1d334ab1dc","name":"warehouse-829","location":"France","maxAmount":198},{"id":"7a252330-ef29-43e5-8287-c9123caf5c22","name":"warehouse-358","location":"Brazil","maxAmount":373},{"id":"7cd9bb67-ad64-40ec-b0c9-1a090e8ee632","name":"warehouse-429","location":"China","maxAmount":475},{"id":"810f4d55-710e-4928-88d2-117875267b29","name":"warehouse-152","location":"USA","maxAmount":348},{"id":"81b381c6-8a54-42ef-a6a9-b28c66f25020","name":"warehouse-656","location":"Brazil","maxAmount":201},{"id":"83a29b7a-15b1-45d4-abff-3de535f60271","name":"warehouse-158","location":"Russia","maxAmount":343},{"id":"8736e741-0491-4266-947a-31cdd10a2321","name":"warehouse-941","location":"Russia","maxAmount":134},{"id":"95e9c21c-bec9-46b9-8932-24d11db217fe","name":"warehouse-866","location":"Brazil","maxAmount":208},{"id":"9882ad3a-ef75-4952-a516-500bd718dd22","name":"warehouse-312","location":"France","maxAmount":136},{"id":"9d1032cf-2d6c-483b-945a-565722d864c7","name":"warehouse-417","location":"Brazil","maxAmount":141},{"id":"a2ef8ae8-afdb-4867-83be-b11dcbbe90f0","name":"w-n","location":"Beijing","maxAmount":500},{"id":"a9006b54-de16-4c00-aad8-71851bea69e6","name":"warehouse-135","location":"France","maxAmount":138},{"id":"a9b32aa3-3187-4cd1-852a-e61a2ebccef8","name":"warehouse-240","location":"Russia","maxAmount":386},{"id":"adc683a3-8dd3-47b0-8dff-35ed5ec091a2","name":"warehouse-618","location":"Russia","maxAmount":275},{"id":"ae86ae16-018b-4b74-bb8f-c1a03d636794","name":"warehouse-750","location":"China","maxAmount":223},{"id":"aff7a6f2-2181-47a6-bf52-0fee7ca38891","name":"warehouse-927","location":"Brazil","maxAmount":154},{"id":"b5b7b576-0afb-4c51-b2fb-281c809526dc","name":"w-n","location":"Beijing","maxAmount":500},{"id":"b8000ca8-bb2b-4a73-a628-5b5153297b13","name":"warehouse-309","location":"China","maxAmount":266},{"id":"b85814fb-b3b2-42c7-9335-60d477f24620","name":"w-n","location":"Beijing","maxAmount":500},{"id":"bd05e590-1346-4fdb-be13-0e17fd1ad34f","name":"w-n","location":"Beijing","maxAmount":500},{"id":"c9088df9-6fd5-4329-8712-0c7946363673","name":"warehouse-871","location":"China","maxAmount":200},{"id":"c9ab7919-f9d6-4c2d-bdb8-939a7630709a","name":"warehouse-343","location":"USA","maxAmount":348},{"id":"ca6050e8-521d-4518-8919-4db682cc82fc","name":"w-n","location":"Beijing","maxAmount":500},{"id":"cb60fe9a-5d1e-40eb-88bd-1c3dfe034770","name":"warehouse-987","location":"China","maxAmount":484},{"id":"cf54859d-1bff-4bda-8d78-029b9960b272","name":"warehouse-469","location":"USA","maxAmount":352},{"id":"d2fe2d64-bcb9-44db-89cc-2f8dd75060a0","name":"warehouse-457","location":"China","maxAmount":479},{"id":"d316ee6f-e846-45c4-b8a4-9929d9c6b306","name":"warehouse-752","location":"USA","maxAmount":302},{"id":"d8be154a-da4f-4699-bf14-4456119de4a8","name":"warehouse-2","location":"France","maxAmount":500},{"id":"e28a4b39-e218-440c-96bc-898c3673ce73","name":"warehouse-774","location":"China","maxAmount":469},{"id":"e6530002-2bb6-4746-bed3-c1b93deafb46","name":"warehouse-911","location":"Russia","maxAmount":320},{"id":"ea789748-5715-4649-8b72-ed2a939ebf2d","name":"w-n","location":"Beijing","maxAmount":500},{"id":"efb7dac4-d1fa-42e4-a336-20827ddca769","name":"warehouse-643","location":"Brazil","maxAmount":265},{"id":"f1f48dd9-1d91-48d3-ae28-f7fa0275f8ba","name":"warehouse-109","location":"China","maxAmount":207},{"id":"f7effc51-c615-43d7-82bb-6702c50d43e9","name":"warehouse-153","location":"France","maxAmount":297},{"id":"feb0836c-376a-4700-8f12-5af5bb80562c","name":"warehouse-1","location":"Beijing","maxAmount":200}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="644" locationUrl="java:test://dev.xxj.logistics.controller.WarehouseControllerTest/t06getWarehouseById1" name="t06getWarehouseById1()" metainfo="" status="passed">
            <output type="stdout">Hibernate: select w1_0.id,w1_0.location,w1_0.max_amount,w1_0.name from warehouse w1_0 where w1_0.id=?
MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /warehouse/15f97304-1ecc-4eb9-88e1-c2a66dc40719
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {SPRING_SECURITY_CONTEXT=SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=user, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_USER]]]}
Handler:
             Type = dev.xxj.logistics.controller.WarehouseController
           Method = dev.xxj.logistics.controller.WarehouseController#getWarehouseById(UUID)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = {"id":"15f97304-1ecc-4eb9-88e1-c2a66dc40719","name":"warehouse-581","location":"Brazil","maxAmount":600}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="643" locationUrl="java:test://dev.xxj.logistics.controller.WarehouseControllerTest/t07getWarehouseById2" name="t07getWarehouseById2()" metainfo="" status="passed">
            <output type="stdout">Hibernate: select w1_0.id,w1_0.location,w1_0.max_amount,w1_0.name from warehouse w1_0 where w1_0.id=?
MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /warehouse/d5252628-822b-4174-8a7e-e5510c81752e
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {SPRING_SECURITY_CONTEXT=SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=user, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_USER]]]}
Handler:
             Type = dev.xxj.logistics.controller.WarehouseController
           Method = dev.xxj.logistics.controller.WarehouseController#getWarehouseById(UUID)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="3" locationUrl="java:test://dev.xxj.logistics.controller.WarehouseControllerTest/t08addWarehouse" name="t08addWarehouse()" metainfo="" status="passed">
            <output type="stdout">MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /warehouse
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"104"]
             Body = {"id":"3374b466-0094-42e2-966e-94c5ba876d2f","name":"warehouse-838","location":"Russia","maxAmount":240}
    Session Attrs = {SPRING_SECURITY_CONTEXT=SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN, ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_ADMIN, ROLE_USER]]]}
Handler:
             Type = dev.xxj.logistics.controller.WarehouseController
           Method = dev.xxj.logistics.controller.WarehouseController#addWarehouse(Warehouse)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="6" locationUrl="java:test://dev.xxj.logistics.controller.WarehouseControllerTest/t08updateWarehouse" name="t08updateWarehouse()" metainfo="" status="failed">
            <diff actual="404" expected="200"/>
            <output type="stdout">MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /warehouse/
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"104"]
             Body = {"id":"3374b466-0094-42e2-966e-94c5ba876d2f","name":"warehouse-838","location":"Russia","maxAmount":303}
    Session Attrs = {SPRING_SECURITY_CONTEXT=SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN, ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_ADMIN, ROLE_USER]]]}
Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = org.springframework.web.servlet.resource.NoResourceFoundException
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 404
    Error message = No static resource warehouse.
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
            <output type="stderr">java.lang.AssertionError: Status expected:&lt;200&gt; but was:&lt;404&gt;&#13;
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:59)&#13;
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:122)&#13;
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:637)&#13;
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)&#13;
	at dev.xxj.logistics.controller.WarehouseControllerTest.t08updateWarehouse(WarehouseControllerTest.java:133)&#13;
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)&#13;
</output>
        </test>
        <test duration="1" locationUrl="java:test://dev.xxj.logistics.controller.WarehouseControllerTest/t09deleteWarehouse1" name="t09deleteWarehouse1()" metainfo="" status="passed">
            <output type="stdout">MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /warehouse/
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {SPRING_SECURITY_SAVED_REQUEST=DefaultSavedRequest [http://localhost/warehouse/?continue]}
Handler:
             Type = null
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 401
    Error message = Unauthorized
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", WWW-Authenticate:"Basic realm="Realm"", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="1" locationUrl="java:test://dev.xxj.logistics.controller.WarehouseControllerTest/t10deleteWarehouse2" name="t10deleteWarehouse2()" metainfo="" status="passed">
            <output type="stdout">MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /warehouse/
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {SPRING_SECURITY_CONTEXT=SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=user, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_USER]]]}
Handler:
             Type = null
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 403
    Error message = Forbidden
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="2" locationUrl="java:test://dev.xxj.logistics.controller.WarehouseControllerTest/t11getAllWarehouses2" name="t11getAllWarehouses2()" metainfo="" status="passed">
            <output type="stdout">MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /warehouse
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {SPRING_SECURITY_CONTEXT=SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=user, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_USER]]]}
Handler:
             Type = dev.xxj.logistics.controller.WarehouseController
           Method = dev.xxj.logistics.controller.WarehouseController#getAllWarehouses()
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = [{"id":"0288a74b-a45f-4545-a84f-071cab1d7f02","name":"w-n","location":"Beijing","maxAmount":500},{"id":"07b7bcc9-d064-4ffb-8d39-f42ef5351111","name":"warehouse-791","location":"China","maxAmount":431},{"id":"15f97304-1ecc-4eb9-88e1-c2a66dc40719","name":"warehouse-581","location":"Brazil","maxAmount":600},{"id":"18c32ca5-5631-43f9-aee2-8d43f8bef1c5","name":"warehouse-645","location":"Brazil","maxAmount":122},{"id":"1dc13c41-6f86-42be-88f1-fa07197b28f4","name":"warehouse-190","location":"Russia","maxAmount":200},{"id":"205f18b0-d296-4451-b2fb-81a3af42be0f","name":"warehouse-145","location":"Russia","maxAmount":290},{"id":"28100b07-092a-4a72-9ab9-fe5448f74f5a","name":"warehouse-677","location":"China","maxAmount":282},{"id":"2c5e006a-4a57-4c40-8829-85373d54d3d3","name":"warehouse-868","location":"France","maxAmount":305},{"id":"2e69888d-ecc8-4096-8173-c44d7c4e7514","name":"warehouse-548","location":"China","maxAmount":105},{"id":"2f6faa0a-cec5-4c0f-bc75-b0690dbdfd4b","name":"warehouse-893","location":"Brazil","maxAmount":105},{"id":"3374b466-0094-42e2-966e-94c5ba876d2f","name":"warehouse-838","location":"Russia","maxAmount":240},{"id":"3b2173eb-6cb2-46b7-9b02-61c9c9fb7c88","name":"warehouse-766","location":"France","maxAmount":144},{"id":"3d02881e-d36f-492e-be49-c77876c703ce","name":"warehouse-386","location":"France","maxAmount":470},{"id":"3ef8acbd-9275-40be-adee-d30331f3b08b","name":"warehouse-416","location":"USA","maxAmount":105},{"id":"4afba9a3-f291-44ec-9884-1554a7004212","name":"warehouse-539","location":"USA","maxAmount":168},{"id":"4b87de86-8311-472b-85be-76d0515b15b0","name":"warehouse-579","location":"China","maxAmount":287},{"id":"4dde5a0c-07b1-4fbb-9271-e7d86cec7b59","name":"warehouse-204","location":"China","maxAmount":168},{"id":"50631618-90bb-4c2a-bf5d-a81ac451678d","name":"warehouse-516","location":"Russia","maxAmount":209},{"id":"53eaf9f8-78bc-46a2-9ef4-68fc92a59e9b","name":"warehouse-941","location":"France","maxAmount":343},{"id":"5511eac1-ba26-4c14-bd04-66e789a3b023","name":"warehouse-802","location":"China","maxAmount":495},{"id":"5dc44727-5f82-4a22-b134-49c1274dfd37","name":"warehouse-333","location":"France","maxAmount":275},{"id":"5f06e8ce-0aa9-47ca-8311-ded0f0d294cc","name":"warehouse-978","location":"USA","maxAmount":394},{"id":"62742eea-8669-48c9-88a7-b905c2f110c5","name":"warehouse-879","location":"Russia","maxAmount":331},{"id":"644ac7ab-369e-4a1c-84b8-a635050f83be","name":"warehouse-897","location":"Russia","maxAmount":168},{"id":"68d8b10e-635a-4c6e-813b-be585b6ff10d","name":"warehouse-253","location":"Brazil","maxAmount":247},{"id":"696d6d94-926f-418c-884f-95505707e821","name":"warehouse-151","location":"Russia","maxAmount":200},{"id":"6cd6610e-97b4-43bd-8b37-27f7b92482ab","name":"warehouse-681","location":"Russia","maxAmount":186},{"id":"71e08388-c18f-4ef9-901a-49bbaadda2ea","name":"warehouse-321","location":"France","maxAmount":377},{"id":"74488e45-6bdb-434a-9a64-5e1d334ab1dc","name":"warehouse-829","location":"France","maxAmount":198},{"id":"7a252330-ef29-43e5-8287-c9123caf5c22","name":"warehouse-358","location":"Brazil","maxAmount":373},{"id":"7cd9bb67-ad64-40ec-b0c9-1a090e8ee632","name":"warehouse-429","location":"China","maxAmount":475},{"id":"810f4d55-710e-4928-88d2-117875267b29","name":"warehouse-152","location":"USA","maxAmount":348},{"id":"81b381c6-8a54-42ef-a6a9-b28c66f25020","name":"warehouse-656","location":"Brazil","maxAmount":201},{"id":"83a29b7a-15b1-45d4-abff-3de535f60271","name":"warehouse-158","location":"Russia","maxAmount":343},{"id":"8736e741-0491-4266-947a-31cdd10a2321","name":"warehouse-941","location":"Russia","maxAmount":134},{"id":"95e9c21c-bec9-46b9-8932-24d11db217fe","name":"warehouse-866","location":"Brazil","maxAmount":208},{"id":"9882ad3a-ef75-4952-a516-500bd718dd22","name":"warehouse-312","location":"France","maxAmount":136},{"id":"9d1032cf-2d6c-483b-945a-565722d864c7","name":"warehouse-417","location":"Brazil","maxAmount":141},{"id":"a2ef8ae8-afdb-4867-83be-b11dcbbe90f0","name":"w-n","location":"Beijing","maxAmount":500},{"id":"a9006b54-de16-4c00-aad8-71851bea69e6","name":"warehouse-135","location":"France","maxAmount":138},{"id":"a9b32aa3-3187-4cd1-852a-e61a2ebccef8","name":"warehouse-240","location":"Russia","maxAmount":386},{"id":"adc683a3-8dd3-47b0-8dff-35ed5ec091a2","name":"warehouse-618","location":"Russia","maxAmount":275},{"id":"ae86ae16-018b-4b74-bb8f-c1a03d636794","name":"warehouse-750","location":"China","maxAmount":223},{"id":"aff7a6f2-2181-47a6-bf52-0fee7ca38891","name":"warehouse-927","location":"Brazil","maxAmount":154},{"id":"b5b7b576-0afb-4c51-b2fb-281c809526dc","name":"w-n","location":"Beijing","maxAmount":500},{"id":"b8000ca8-bb2b-4a73-a628-5b5153297b13","name":"warehouse-309","location":"China","maxAmount":266},{"id":"b85814fb-b3b2-42c7-9335-60d477f24620","name":"w-n","location":"Beijing","maxAmount":500},{"id":"bd05e590-1346-4fdb-be13-0e17fd1ad34f","name":"w-n","location":"Beijing","maxAmount":500},{"id":"c9088df9-6fd5-4329-8712-0c7946363673","name":"warehouse-871","location":"China","maxAmount":200},{"id":"c9ab7919-f9d6-4c2d-bdb8-939a7630709a","name":"warehouse-343","location":"USA","maxAmount":348},{"id":"ca6050e8-521d-4518-8919-4db682cc82fc","name":"w-n","location":"Beijing","maxAmount":500},{"id":"cb60fe9a-5d1e-40eb-88bd-1c3dfe034770","name":"warehouse-987","location":"China","maxAmount":484},{"id":"cf54859d-1bff-4bda-8d78-029b9960b272","name":"warehouse-469","location":"USA","maxAmount":352},{"id":"d2fe2d64-bcb9-44db-89cc-2f8dd75060a0","name":"warehouse-457","location":"China","maxAmount":479},{"id":"d316ee6f-e846-45c4-b8a4-9929d9c6b306","name":"warehouse-752","location":"USA","maxAmount":302},{"id":"d8be154a-da4f-4699-bf14-4456119de4a8","name":"warehouse-2","location":"France","maxAmount":500},{"id":"e28a4b39-e218-440c-96bc-898c3673ce73","name":"warehouse-774","location":"China","maxAmount":469},{"id":"e6530002-2bb6-4746-bed3-c1b93deafb46","name":"warehouse-911","location":"Russia","maxAmount":320},{"id":"ea789748-5715-4649-8b72-ed2a939ebf2d","name":"w-n","location":"Beijing","maxAmount":500},{"id":"efb7dac4-d1fa-42e4-a336-20827ddca769","name":"warehouse-643","location":"Brazil","maxAmount":265},{"id":"f1f48dd9-1d91-48d3-ae28-f7fa0275f8ba","name":"warehouse-109","location":"China","maxAmount":207},{"id":"f7effc51-c615-43d7-82bb-6702c50d43e9","name":"warehouse-153","location":"France","maxAmount":297},{"id":"feb0836c-376a-4700-8f12-5af5bb80562c","name":"warehouse-1","location":"Beijing","maxAmount":200}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="751" locationUrl="java:test://dev.xxj.logistics.controller.WarehouseControllerTest/t12isFull" name="t12isFull()" metainfo="" status="passed">
            <output type="stdout">Hibernate: select w1_0.id,w1_0.location,w1_0.max_amount,w1_0.name from warehouse w1_0 where w1_0.id=?
Hibernate: select gs1_0.id,gs1_0.amount,gs1_0.good_id,gs1_0.warehouse_id from good_storage gs1_0 join warehouse w1_0 on w1_0.id=gs1_0.warehouse_id where w1_0.id=?
MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /warehouse/full/3374b466-0094-42e2-966e-94c5ba876d2f
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {SPRING_SECURITY_CONTEXT=SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=user, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_USER]]]}
Handler:
             Type = dev.xxj.logistics.controller.WarehouseController
           Method = dev.xxj.logistics.controller.WarehouseController#isFull(UUID)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", Content-Type:"text/plain;charset=UTF-8", Content-Length:"8", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = text/plain;charset=UTF-8
             Body = Not Full
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="113" locationUrl="java:test://dev.xxj.logistics.controller.WarehouseControllerTest/t13getExistAmount" name="t13getExistAmount()" metainfo="" status="passed">
            <output type="stdout">Hibernate: select gs1_0.id,gs1_0.amount,gs1_0.good_id,gs1_0.warehouse_id from good_storage gs1_0 join warehouse w1_0 on w1_0.id=gs1_0.warehouse_id where w1_0.id=?
MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /warehouse/amount/3374b466-0094-42e2-966e-94c5ba876d2f
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {SPRING_SECURITY_CONTEXT=SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=user, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_USER]]]}
Handler:
             Type = dev.xxj.logistics.controller.WarehouseController
           Method = dev.xxj.logistics.controller.WarehouseController#getExistAmount(UUID)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", Content-Type:"text/plain;charset=UTF-8", Content-Length:"15", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = text/plain;charset=UTF-8
             Body = Exist amount: 0
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="547" locationUrl="java:test://dev.xxj.logistics.controller.WarehouseControllerTest/t20deleteWarehouse3" name="t20deleteWarehouse3()" metainfo="" status="passed">
            <output type="stdout">Hibernate: select w1_0.id,w1_0.location,w1_0.max_amount,w1_0.name from warehouse w1_0 where w1_0.id=?
Hibernate: delete from warehouse where id=?
MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /warehouse/3374b466-0094-42e2-966e-94c5ba876d2f
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {SPRING_SECURITY_CONTEXT=SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN, ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_ADMIN, ROLE_USER]]]}
Handler:
             Type = dev.xxj.logistics.controller.WarehouseController
           Method = dev.xxj.logistics.controller.WarehouseController#deleteWarehouse(UUID)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
    </suite>
    <suite duration="1" locationUrl="java:suite://dev.xxj.logistics.ApplicationTests" name="ApplicationTests" status="passed">
        <test duration="1" locationUrl="java:test://dev.xxj.logistics.ApplicationTests/contextLoads" name="contextLoads()" metainfo="" status="passed"/>
    </suite>
</testrun>
